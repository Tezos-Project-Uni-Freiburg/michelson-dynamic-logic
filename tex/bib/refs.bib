@Inbook{KeY2,
	author="Schmitt, Peter H.",
	editor="Ahrendt, Wolfgang
		and Beckert, Bernhard
		and Bubel, Richard
		and H{\"a}hnle, Reiner
		and Schmitt, Peter H.
		and Ulbrich, Mattias",
	title="First-Order Logic",
	bookTitle="Deductive Software Verification -- The KeY Book: From Theory to Practice",
	year="2016",
	publisher="Springer International Publishing",
	address="Cham",
	pages="23--47",
	abstract="This chapter presents syntax, a calculus, and semantics of first-order logic. This is done first for a basic, typed first-order logic, and then for a richer logic tailored to the verification of Java programs.",
	isbn="978-3-319-49812-6",
	doi="10.1007/978-3-319-49812-6_2",
	url="https://doi.org/10.1007/978-3-319-49812-6_2"
}

@Inbook{KeY3,
	author="Beckert, Bernhard
		and Klebanov, Vladimir
		and Wei{\ss}, Benjamin",
	editor="Ahrendt, Wolfgang
		and Beckert, Bernhard
		and Bubel, Richard
		and H{\"a}hnle, Reiner
		and Schmitt, Peter H.
		and Ulbrich, Mattias",
	title="Dynamic Logic for Java",
	bookTitle="Deductive Software Verification -- The KeY Book: From Theory to Practice",
	year="2016",
	publisher="Springer International Publishing",
	address="Cham",
	pages="49--106",
	abstract="In this chapter, we introduce an instance of dynamic logic, called JavaDL, that allows us to reason about Java programs. Dynamic logic extends first-order logic and makes it possible to consider several program states in a single formula. Its principle is the formulation of assertions about program behavior by integrating programs and formulas within a single language. We present a sequent calculus for JavaDL, which is used in the KeY System for verifying Java programs. Deduction in this calculus is based on symbolic program execution and simple program transformations and is, thus, close to a programmer's understanding of Java. Besides rules for symbolic execution, the calculus contains rules for program abstraction and modularization, including invariant rules for reasoning about loops and rules that replace a method invocation by the method's contract.",
	isbn="978-3-319-49812-6",
	doi="10.1007/978-3-319-49812-6_3",
	url="https://doi.org/10.1007/978-3-319-49812-6_3"
}

@INPROCEEDINGS{WHYtool,
  author={Arrojado da Horta, Luís Pedro and Santos Reis, João and de Sousa, Simão Melo and Pereira, Mário},
  booktitle={2020 IEEE International Conference on Blockchain (Blockchain)}, 
  title={A tool for proving Michelson Smart Contracts in WHY3}, 
  year={2020},
  volume={},
  number={},
  pages={409-414},
  doi={10.1109/Blockchain50366.2020.00059}}

@misc{Mref,
	author = {{Nomadic Lab}},
	title  = {Michelson Reference},
	year   = {2020},
	note   = {Last accessed 17 October 2023},
	url    = {https://tezos.gitlab.io/michelson-reference/}
}

@Book{plfa,
    author = {Philip Wadler and Wen Kokke and Jeremy G. Siek},
    title  = {Programming Language Foundations in {A}gda},
    year   = {2022},
    month  = aug,
    url    = {https://plfa.inf.ed.ac.uk/22.08/},
}

@misc{devres,
	author = {{Nomadic Lab}},
	title  = {Michelson: the language of Smart Contracts in Tezos},
	year   = {2018-2023},
	note   = {Last accessed 17 October 2023},
	url    = {https://tezos.gitlab.io/michelson-reference/}
}

@INPROCEEDINGS{manticore-from-thesis,
  author={Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},
  booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
  title={Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts}, 
  year={2019},
  volume={},
  number={},
  pages={1186-1189},
  doi={10.1109/ASE.2019.00133}}

@inproceedings{oyente-from-thesis,
author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
title = {Making Smart Contracts Smarter},
year = {2016},
isbn = {9781450341394},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2976749.2978309},
doi = {10.1145/2976749.2978309},
abstract = {Cryptocurrencies record transactions in a decentralized data structure called a blockchain. Two of the most popular cryptocurrencies, Bitcoin and Ethereum, support the feature to encode rules or scripts for processing transactions. This feature has evolved to give practical shape to the ideas of smart contracts, or full-fledged programs that are run on blockchains. Recently, Ethereum's smart contract system has seen steady adoption, supporting tens of thousands of contracts, holding millions dollars worth of virtual coins.In this paper, we investigate the security of running smart contracts based on Ethereum in an open distributed network like those of cryptocurrencies. We introduce several new security problems in which an adversary can manipulate smart contract execution to gain profit. These bugs suggest subtle gaps in the understanding of the distributed semantics of the underlying platform. As a refinement, we propose ways to enhance the operational semantics of Ethereum to make contracts less vulnerable. For developers writing contracts for the existing Ethereum system, we build a symbolic execution tool called Oyente to find potential security bugs. Among 19, 336 existing Ethereum contracts, Oyente flags 8, 833 of them as vulnerable, including the TheDAO bug which led to a 60 million US dollar loss in June 2016. We also discuss the severity of other attacks for several case studies which have source code available and confirm the attacks (which target only our accounts) in the main Ethereum network.},
booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
pages = {254–269},
numpages = {16},
keywords = {cryptocurrencies, smart contract, ethereum, symbolic execution, blockchain},
location = {Vienna, Austria},
series = {CCS '16}
}

@inproceedings{securify-from-thesis,
author = {Tsankov, Petar and Dan, Andrei and Drachsler-Cohen, Dana and Gervais, Arthur and B\"{u}nzli, Florian and Vechev, Martin},
title = {Securify: Practical Security Analysis of Smart Contracts},
year = {2018},
isbn = {9781450356930},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3243734.3243780},
doi = {10.1145/3243734.3243780},
abstract = {Permissionless blockchains allow the execution of arbitrary programs (called smart contracts), enabling mutually untrusted entities to interact without relying on trusted third parties. Despite their potential, repeated security concerns have shaken the trust in handling billions of USD by smart contracts. To address this problem, we present Securify, a security analyzer for Ethereum smart contracts that is scalable, fully automated, and able to prove contract behaviors as safe/unsafe with respect to a given property. Securify's analysis consists of two steps. First, it symbolically analyzes the contract's dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not. To enable extensibility, all patterns are specified in a designated domain-specific language. Securify is publicly released, it has analyzed >18K contracts submitted by its users, and is regularly used to conduct security audits by experts. We present an extensive evaluation of Securify over real-world Ethereum smart contracts and demonstrate that it can effectively prove the correctness of smart contracts and discover critical violations.},
booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
pages = {67–82},
numpages = {16},
keywords = {smart contracts, stratified datalog, verification, security analysis},
location = {Toronto, Canada},
series = {CCS '18}
}

@InProceedings{mi-cho-coq,
author="Bernardo, Bruno
and Cauderlier, Rapha{\"e}l
and Hu, Zhenlei
and Pesin, Basile
and Tesson, Julien",
editor="Sekerinski, Emil
and Moreira, Nelma
and Oliveira, Jos{\'e} N.
and Ratiu, Daniel
and Guidotti, Riccardo
and Farrell, Marie
and Luckcuck, Matt
and Marmsoler, Diego
and Campos, Jos{\'e}
and Astarte, Troy
and Gonnord, Laure
and Cerone, Antonio
and Couto, Luis
and Dongol, Brijesh
and Kutrib, Martin
and Monteiro, Pedro
and Delmas, David",
title="Mi-Cho-Coq, a Framework for Certifying Tezos Smart Contracts",
booktitle="Formal Methods. FM 2019 International Workshops",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="368--379",
abstract="Tezos is a blockchain launched in June 2018. It is written in OCaml and supports smart contracts. Its smart contract language is called Michelson and it has been designed with formal verification in mind. In this article, we present Mi-Cho-Coq, a Coq framework for verifying the functional correctness of Michelson smart contracts. As a case study, we detail the certification of a Multisig contract with the Mi-Cho-Coq framework.",
isbn="978-3-030-54994-7"
}

@inproceedings{abstract-interpretation,
author = {Bau, Guillaume and Min\'{e}, Antoine and Botbol, Vincent and Bouaziz, Mehdi},
title = {Abstract Interpretation of Michelson Smart-Contracts},
year = {2022},
isbn = {9781450392747},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3520313.3534660},
doi = {10.1145/3520313.3534660},
abstract = {Static analysis of smart-contracts is becoming more widespread  
on blockchain platforms. Analyzers rely on techniques  
like symbolic execution or model checking, but few of them can  
provide strong soundness properties and guarantee the analysis  
termination at the same time. As smart-contracts often  
manipulate economic assets, proving  
numerical properties beyond the absence of runtime errors  
is also desirable. Smart-contract  
execution models differ considerably from mainstream  
programming languages and vary from one blockchain to another,  
making state-of-the-art analyses hard to adapt. For instance,  
smart-contract calls may modify a persistent storage  
impacting subsequent calls. This makes it difficult for tools to  
infer invariants \%and high-level security properties  
required to formally ensure the absence of exploitable vulnerabilities.  

The Michelson smart-contract language, used in the Tezos  
blockchain, is strongly typed, stack-based, and has a strict  
execution model leaving few opportunities  
for implicit runtime errors. We present a work in progress static analyzer for Michelson  
based on Abstract  
Interpretation and implemented within MOPSA, a modular  
static analyzer.  
Our tool supports the Michelson semantic features, including inner calls to external  
contracts. It can prove the absence of runtime errors and infer  
invariants on the persistent storage over an unbounded number  
of calls. It is also being extended to prove high-level  
numerical and security properties.},
booktitle = {Proceedings of the 11th ACM SIGPLAN International Workshop on the State Of the Art in Program Analysis},
pages = {36–43},
numpages = {8},
keywords = {abstract interpretation, smart-contract, static analysis, Michelson, Tezos, blockchain},
location = {San Diego, CA, USA},
series = {SOAP 2022}
}


@INPROCEEDINGS{why3,
  author={Arrojado da Horta, Luís Pedro and Santos Reis, João and de Sousa, Simão Melo and Pereira, Mário},
  booktitle={2020 IEEE International Conference on Blockchain (Blockchain)}, 
  title={A tool for proving Michelson Smart Contracts in WHY3}, 
  year={2020},
  volume={},
  number={},
  pages={409-414},
  doi={10.1109/Blockchain50366.2020.00059}}


@ARTICLE{helmholtz-from-thesis,
  title    = "Helmholtz: A Verifier for Tezos Smart Contracts Based on
              Refinement Types",
  author   = "Nishida, Yuki and Saito, Hiromasa and Chen, Ran and Kawata, Akira
              and Furuse, Jun and Suenaga, Kohei and Igarashi, Atsushi",
  abstract = "A smart contract is a program executed on a blockchain, based on
              which many cryptocurrencies are implemented, and is being used
              for automating transactions. Due to the large amount of money
              that smart contracts deal with, there is a surging demand for a
              method that can statically and formally verify them. This article
              describes our type-based static verification tool Helmholtz for
              Michelson, which is a statically typed stack-based language for
              writing smart contracts that are executed on the blockchain
              platform Tezos. Helmholtz is designed on top of our extension of
              Michelson's type system with refinement types. Helmholtz takes a
              Michelson program annotated with a user-defined specification
              written in the form of a refinement type as input; it then
              typechecks the program against the specification based on the
              refinement type system, discharging the generated verification
              conditions with the SMT solver Z3. We briefly introduce our
              refinement type system for the core calculus Mini-Michelson of
              Michelson, which incorporates the characteristic features such as
              compound datatypes (e.g., lists and pairs), higher-order
              functions, and invocation of another contract. Helmholtz
              successfully verifies several practical Michelson programs,
              including one that transfers money to an account and that checks
              a digital signature.",
  journal  = "New Generation Computing",
  volume   =  40,
  number   =  2,
  pages    = "507--540",
  month    =  jul,
  year     =  2022
}

@book{DL,
author = {Harel, David and Tiuryn, Jerzy and Kozen, Dexter},
title = {Dynamic Logic},
year = {2000},
isbn = {0262082896},
publisher = {MIT Press},
address = {Cambridge, MA, USA},
abstract = {From the Publisher:Among the many approaches to formal reasoning about programs, Dynamic Logic enjoys the singular advantage of being strongly related to classical logic. Its variants constitute natural generalizations and extensions of classical formalisms. For example, Propositional Dynamic Logic (PDL) can be described as a blend of three complementary classical ingredients: propositional calculus, modal logic, and the algebra of regular events. In First-Order Dynamic Logic (DL), the propositional calculus is replaced by classical first-order predicate calculus. Dynamic Logic is a system of remarkable unity that is theoretically rich as well as of practical value. It can be used for formalizing correctness specifications and proving rigorously that those specifications are met by a particular program. Other uses include determining the equivalence of programs, comparing the expressive power of various programming constructs, and synthesizing programs from specifications.  This book provides the first comprehensive introduction to Dynamic Logic. It is divided into three parts. The first part reviews the appropriate fundamental concepts of logic and computability theory and can stand alone as an introduction to these topics. The second part discusses PDL and its variants, and the third part discusses DL and its variants. Examples are provided throughout, and exercises and a short historical section are included at the end of each chapter.}
}
@Inbook{Pasareanu2020,
author="Pasareanu, Corina S.",
title="Symbolic Execution: The Basics",
bookTitle="Symbolic Execution and Quantitative Reasoning: Applications to Software Safety and Security",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="5--20",
abstract="In this chapter, I give a gentle introduction to symbolic execution, using the simple example illustrated in Figure 2.1. On the left-hand side of the figure, there is some code that takes two integer inputs x and y and it checks x is greater than y, in which case some computation is performed to swap the two inputs. After this computation, x is checked again to see if it is greater than y, in which case an assert violation will happen. If the code swapping works correctly, this assert violation should not be possible. Testing this program for assert violations would typically involve assigning some concrete values to the inputs (say x = 1 and y = 2) and executing the code. As a result, only one program path will be executed; that does not lead to the error.",
isbn="978-3-031-02551-8",
doi="10.1007/978-3-031-02551-8_2",
url="https://doi.org/10.1007/978-3-031-02551-8_2"
}
@inproceedings{DBLP:conf/osdi/CadarDE08,
  author       = {Cristian Cadar and
                  Daniel Dunbar and
                  Dawson R. Engler},
  editor       = {Richard Draves and
                  Robbert van Renesse},
  title        = {{KLEE:} Unassisted and Automatic Generation of High-Coverage Tests
                  for Complex Systems Programs},
  booktitle    = {8th {USENIX} Symposium on Operating Systems Design and Implementation,
                  {OSDI} 2008, December 8-10, 2008, San Diego, California, USA, Proceedings},
  pages        = {209--224},
  publisher    = {{USENIX} Association},
  year         = {2008},
  url          = {http://www.usenix.org/events/osdi08/tech/full\_papers/cadar/cadar.pdf},
  timestamp    = {Thu, 12 Mar 2020 11:35:55 +0100},
  biburl       = {https://dblp.org/rec/conf/osdi/CadarDE08.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{DBLP:conf/pldi/GodefroidKS05,
  author       = {Patrice Godefroid and
                  Nils Klarlund and
                  Koushik Sen},
  editor       = {Vivek Sarkar and
                  Mary W. Hall},
  title        = {{DART:} directed automated random testing},
  booktitle    = {Proceedings of the {ACM} {SIGPLAN} 2005 Conference on Programming
                  Language Design and Implementation, Chicago, IL, USA, June 12-15,
                  2005},
  pages        = {213--223},
  publisher    = {{ACM}},
  year         = {2005},
  url          = {https://doi.org/10.1145/1065010.1065036},
  doi          = {10.1145/1065010.1065036},
  timestamp    = {Fri, 25 Jun 2021 14:48:54 +0200},
  biburl       = {https://dblp.org/rec/conf/pldi/GodefroidKS05.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{DBLP:conf/icse/CsallnerTS08,
  author       = {Christoph Csallner and
                  Nikolai Tillmann and
                  Yannis Smaragdakis},
  editor       = {Wilhelm Sch{\"{a}}fer and
                  Matthew B. Dwyer and
                  Volker Gruhn},
  title        = {DySy: dynamic symbolic execution for invariant inference},
  booktitle    = {30th International Conference on Software Engineering {(ICSE} 2008),
                  Leipzig, Germany, May 10-18, 2008},
  pages        = {281--290},
  publisher    = {{ACM}},
  year         = {2008},
  url          = {https://doi.org/10.1145/1368088.1368127},
  doi          = {10.1145/1368088.1368127},
  timestamp    = {Tue, 06 Nov 2018 11:06:55 +0100},
  biburl       = {https://dblp.org/rec/conf/icse/CsallnerTS08.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/cacm/King76,
  author       = {James C. King},
  title        = {Symbolic Execution and Program Testing},
  journal      = {Commun. {ACM}},
  volume       = {19},
  number       = {7},
  pages        = {385--394},
  year         = {1976},
  _url          = {https://doi.org/10.1145/360248.360252},
  doi          = {10.1145/360248.360252},
  timestamp    = {Tue, 06 Nov 2018 12:51:41 +0100},
  biburl       = {https://dblp.org/rec/journals/cacm/King76.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{watt_et_al,
  author =	{Watt, Conrad and Maksimovi\'{c}, Petar and Krishnaswami, Neelakantan R. and Gardner, Philippa},
  title =	{{A Program Logic for First-Order Encapsulated WebAssembly}},
  booktitle =	{33rd European Conference on Object-Oriented Programming (ECOOP 2019)},
  pages =	{9:1--9:30},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-111-5},
  ISSN =	{1868-8969},
  year =	{2019},
  volume =	{134},
  editor =	{Donaldson, Alastair F.},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  _URL =		{https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ECOOP.2019.9},
  URN =		{urn:nbn:de:0030-drops-108011},
  doi =		{10.4230/LIPIcs.ECOOP.2019.9},
  annote =	{Keywords: WebAssembly, program logic, separation logic, soundness, mechanisation}
}
@inproceedings{lehmann_el_at,
author = {Lehmann, Daniel and Pradel, Michael},
title = {Wasabi: A Framework for Dynamically Analyzing WebAssembly},
year = {2019},
isbn = {9781450362405},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
_url = {https://doi.org/10.1145/3297858.3304068},
doi = {10.1145/3297858.3304068},
booktitle = {Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {1045-1058},
numpages = {14},
location = {Providence, RI, USA},
series = {ASPLOS '19}
}

@InProceedings{ahrendt_et_al,
author="Ahrendt, Wolfgang
and Bubel, Richard",
editor="Margaria, Tiziana
and Steffen, Bernhard",
title="Functional Verification of Smart Contracts via Strong Data Integrity",
booktitle="Leveraging Applications of Formal Methods, Verification and Validation: Applications",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="9--24",
isbn="978-3-030-61467-6"
}
@inproceedings{daniel_et_al,
author = {Balasubramanian, Daniel and Zhang, Zhenkai and McDermet, Dan and Karsai, Gabor},
title = {Dynamic symbolic execution for the analysis of web server applications in Java},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
_url = {https://doi.org/10.1145/3297280.3297494},
doi = {10.1145/3297280.3297494},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {2178-2185},
numpages = {8},
keywords = {testing, symbolic executions, program analysis},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@InProceedings{marques_et_al,
  author =	{Marques, Filipe and Fragoso Santos, Jos\'{e} and Santos, Nuno and Ad\~{a}o, Pedro},
  title =	{{Concolic Execution for WebAssembly}},
  booktitle =	{36th European Conference on Object-Oriented Programming (ECOOP 2022)},
  pages =	{11:1--11:29},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-225-9},
  ISSN =	{1868-8969},
  year =	{2022},
  volume =	{222},
  editor =	{Ali, Karim and Vitek, Jan},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  _URL =		{https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ECOOP.2022.11},
  URN =		{urn:nbn:de:0030-drops-162394},
  doi =		{10.4230/LIPIcs.ECOOP.2022.11},
  annote =	{Keywords: Concolic Testing, WebAssembly, Test-Generation, Testing C Programs}
}

@InProceedings{albert_et_al,
author="Albert, Elvira
and G{\'o}mez-Zamalloa, Miguel
and Hubert, Laurent
and Puebla, Germ{\'a}n",
editor="Hanus, Michael",
title="Verification of Java Bytecode Using Analysis and Transformation of Logic Programs",
booktitle="Practical Aspects of Declarative Languages",
year="2007",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="124--139",
isbn="978-3-540-69611-7"
}

